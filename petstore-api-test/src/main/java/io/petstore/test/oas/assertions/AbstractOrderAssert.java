package io.petstore.test.oas.assertions;

import io.petstore.test.oas.client.model.Order;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Order} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractOrderAssert<S extends AbstractOrderAssert<S, A>, A extends Order> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractOrderAssert}</code> to make assertions on actual Order.
   * @param actual the Order we want to make assertions on.
   */
  protected AbstractOrderAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Order's complete is equal to the given one.
   * @param complete the given complete to compare the actual Order's complete to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's complete is not equal to the given one.
   */
  public S hasComplete(Boolean complete) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting complete of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualComplete = actual.getComplete();
    if (!Objects.areEqual(actualComplete, complete)) {
      failWithMessage(assertjErrorMessage, actual, complete, actualComplete);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Order's id is equal to the given one.
   * @param id the given id to compare the actual Order's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's id is not equal to the given one.
   */
  public S hasId(Long id) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Order's petId is equal to the given one.
   * @param petId the given petId to compare the actual Order's petId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's petId is not equal to the given one.
   */
  public S hasPetId(Long petId) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting petId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualPetId = actual.getPetId();
    if (!Objects.areEqual(actualPetId, petId)) {
      failWithMessage(assertjErrorMessage, actual, petId, actualPetId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Order's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual Order's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's quantity is not equal to the given one.
   */
  public S hasQuantity(Integer quantity) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualQuantity = actual.getQuantity();
    if (!Objects.areEqual(actualQuantity, quantity)) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Order's shipDate is equal to the given one.
   * @param shipDate the given shipDate to compare the actual Order's shipDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's shipDate is not equal to the given one.
   */
  public S hasShipDate(java.util.Date shipDate) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting shipDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualShipDate = actual.getShipDate();
    if (!Objects.areEqual(actualShipDate, shipDate)) {
      failWithMessage(assertjErrorMessage, actual, shipDate, actualShipDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Order's status is equal to the given one.
   * @param status the given status to compare the actual Order's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Order's status is not equal to the given one.
   */
  public S hasStatus(io.petstore.test.oas.client.model.Order.StatusEnum status) {
    // check that actual Order we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    io.petstore.test.oas.client.model.Order.StatusEnum actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
